// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RequestResponseLogs {
  id         String    @id @default(uuid())
  method     String?
  url        String?
  request    Json?
  userId     String?
  statusCode Int?
  response   Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

enum USER_ROLES {
  ADMIN
  PATIENT
  PHYSIO
}

model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  userName           String?
  firstName          String?
  lastName           String?
  password           String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  deletedAt          DateTime?
  firstLogin         Boolean        @default(true)
  role               USER_ROLES
  loginSessions      LoginSession[]
  createdBy          String?
  otp                Otp?
  // mode          Mode[]
  userAddress        UserAddress[]
  userDetail         UserDetail?
  physioModeSession  ModeSession[]  @relation("physioModeSession")
  patientModeSession ModeSession[]  @relation("patientModeSession")

  // 
  physioTherapist User?  @relation("PhysioPatients", fields: [createdBy], references: [id])
  patients        User[] @relation("PhysioPatients")
}

model UserDetail {
  id          String    @id @default(uuid())
  userId      String    @unique
  phoneNumber String?
  age         Int?
  weight      Int?
  profileURL  String?
  phoneCode   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  user        User      @relation(fields: [userId], references: [id])
}

model UserAddress {
  id      String @id @default(uuid())
  userId  String
  address String
  user    User   @relation(fields: [userId], references: [id])
}

model LoginSession {
  id            String    @id @default(uuid())
  userId        String
  deviceTokenId String?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now()) @db.Timestamptz()
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? @db.Timestamptz()
}

enum MODE_SESSION_STATUS {
  START
  STOP
}

model ModeSession {
  id               String              @id @default(uuid())
  patientId        String
  physio           User                @relation(fields: [physioId], name: "physioModeSession", references: [id])
  patient          User                @relation(fields: [patientId], name: "patientModeSession", references: [id])
  physioId         String
  modeId           String?
  status           MODE_SESSION_STATUS
  createdAt        DateTime            @default(now()) @db.Timestamptz()
  updatedAt        DateTime            @updatedAt
  deletedAt        DateTime?           @db.Timestamptz()
  modeTrialSession ModeTrialSession[]
}

enum MODE_TYPE {
  BALANCE_MODE
  TARGET_MODE
  LEFT_RIGHT_MODE
  VISUAL_BALANCE_MODE
}

model Mode {
  id               String             @id @default(uuid())
  name             String
  images           String[]
  trialCount       Int
  trialDuration    Int?
  type             MODE_TYPE
  createdAt        DateTime           @default(now()) @db.Timestamptz()
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?          @db.Timestamptz()
  modeDetail       ModeDetail?
  modeTrialSession ModeTrialSession[]
  // user             User?              @relation(fields: [userId], references: [id])
  // userId           String?
}

model ModeDetail {
  id           String    @id @default(uuid())
  imageUrls    String[]
  videoUrls    String[]
  instructions String[]
  createdAt    DateTime  @default(now()) @db.Timestamptz()
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime? @db.Timestamptz()
  modeId       String    @unique
  mode         Mode      @relation(fields: [modeId], references: [id], onDelete: Cascade)
}

enum MODE_TRIAL_SESSION_STATUS {
  COMPLETED
}

model ModeTrialSession {
  id             String                     @id @default(uuid())
  trialId        Int
  startTime      DateTime?
  endTime        DateTime?
  status         MODE_TRIAL_SESSION_STATUS?
  mode           Mode                       @relation(fields: [modeId], references: [id])
  modeId         String
  results        Json?
  rawData        Json?
  createdAt      DateTime                   @default(now()) @db.Timestamptz()
  updatedAt      DateTime                   @updatedAt
  deletedAt      DateTime?                  @db.Timestamptz()
  modeSesssionId String
  modeSession    ModeSession                @relation(fields: [modeSesssionId], references: [id])
}

enum OTP_TYPE {
  FORGET_PASSWORD
  CHNAGE_PASSWORD
  RESET_PASSWORD
}

model Otp {
  id        String    @id @default(uuid())
  userId    String    @unique
  type      OTP_TYPE
  otpCode   String
  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamptz()
  expiresAt DateTime
  sessionId String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum FILE_TYPE {
  LEFT_RIGHT_MODE
  VISUAL_BALANCE_MODE
}

model File {
  id        String    @id @default(uuid())
  name      String
  url       String
  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamptz()
  type      FILE_TYPE
}
