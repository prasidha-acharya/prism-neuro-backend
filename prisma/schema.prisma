// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RequestResponseLogs {
  id         String    @id @default(uuid())
  method     String?
  url        String?
  request    Json?
  userId     String?
  statusCode Int?
  response   Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

enum UserRoles {
  ADMIN
  PATIENT
  PHYSIO
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  userName     String
  firstName    String?
  lastName     String?
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  role         UserRoles
  userDetails  UserDetail[]
  userSessions UserSession[]
  createdBy    String?
  otp          Otp?
}

model UserDetail {
  id          String    @id @default(uuid())
  userId      String
  phoneNumber String?
  age         String?
  phoneCode   String?
  address     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  user        User      @relation(fields: [userId], references: [id])
}

model UserSession {
  id            String    @id @default(uuid())
  userId        String
  deviceTokenId String?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now()) @db.Timestamptz()
  updatedAt     DateTime  @default(now()) @db.Timestamptz()
  deletedAt     DateTime? @db.Timestamptz()
}

enum ModeSessionStatus {
  START
  STOP
}

model ModeSession {
  id        String            @id @default(uuid())
  patientId String
  doctorId  String
  modeId    String
  status    ModeSessionStatus
  createdAt DateTime          @default(now()) @db.Timestamptz()
  updatedAt DateTime          @default(now()) @db.Timestamptz()
  deletedAt DateTime?         @db.Timestamptz()
}

model Mode {
  id               String             @id @default(uuid())
  name             String
  images           String[]
  trialCount       Int
  trialDuration    Int
  type             String
  createdAt        DateTime           @default(now()) @db.Timestamptz()
  updatedAt        DateTime           @default(now()) @db.Timestamptz()
  deletedAt        DateTime?          @db.Timestamptz()
  modeDetail       ModeDetail?
  ModeTrialSession ModeTrialSession[]
}

model ModeDetail {
  id           String    @id @default(uuid())
  imageUrls    String[]
  videoUrls    String[]
  instructions String[]
  createdAt    DateTime  @default(now()) @db.Timestamptz()
  updatedAt    DateTime  @default(now()) @db.Timestamptz()
  deletedAt    DateTime? @db.Timestamptz()
  modeId       String    @unique
  mode         Mode      @relation(fields: [modeId], references: [id])
}

enum ModeTrialSessionStatus {
  COMPLETED
}

model ModeTrialSession {
  id        String                  @id @default(uuid())
  startTime DateTime?
  endTime   DateTime?
  status    ModeTrialSessionStatus?
  mode      Mode                    @relation(fields: [modeId], references: [id])
  modeId    String
  data      Json?
  createdAt DateTime                @default(now()) @db.Timestamptz()
  updatedAt DateTime                @default(now()) @db.Timestamptz()
  deletedAt DateTime?               @db.Timestamptz()
}

enum OTP_TYPE {
  FORGET_PASSWORD
  CHNAGE_PASSWORD
}

model Otp {
  id        String    @id @default(uuid())
  userId    String    @unique
  type      OTP_TYPE
  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @default(now()) @db.Timestamptz()
  deletedAt DateTime? @db.Timestamptz()
  expiresAt DateTime
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
